var searchIndex = {};
searchIndex['sexp'] = {"items":[[0,"","sexp","A lightweight, self-contained s-expression parser and data format.\nUse `parse` to get an s-expression from its string representation, and the\n`Display` trait to serialize it, potentially by doing `sexp.to_string()`.",null,null],[3,"Error","","The representation of an s-expression parse error.",null,null],[12,"message","","The error message.",0,null],[12,"line","","The line number on which the error occurred.",0,null],[12,"column","","The column number on which the error occurred.",0,null],[12,"index","","The index in the given string which caused the error.",0,null],[4,"Atom","","A single data element in an s-expression. Floats are excluded to ensure\natoms may be used as keys in ordered and hashed data structures.",null,null],[13,"S","","",1,null],[13,"I","","",1,null],[13,"F","","",1,null],[4,"Sexp","","An s-expression is either an atom or a list of s-expressions. This is\nsimilar to the data format used by lisp.",null,null],[13,"Atom","","",2,null],[13,"List","","",2,null],[5,"atom_s","","Constructs an atomic s-expression from a string.",null,{"inputs":[{"name":"str"}],"output":{"name":"sexp"}}],[5,"atom_i","","Constructs an atomic s-expression from an int.",null,{"inputs":[{"name":"i64"}],"output":{"name":"sexp"}}],[5,"atom_f","","Constructs an atomic s-expression from a float.",null,{"inputs":[{"name":"f64"}],"output":{"name":"sexp"}}],[5,"list","","Constructs a list s-expression given a slice of s-expressions.",null,null],[5,"parse","","Reads an s-expression out of a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"atom"}],"output":{"name":"atom"}}],[11,"eq","","",1,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"sexp"},{"name":"sexp"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"sexp"},{"name":"sexp"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"sexp"},{"name":"sexp"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"sexp"},{"name":"sexp"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"sexp"},{"name":"sexp"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"sexp"}],"output":{"name":"sexp"}}],[11,"eq","","",2,{"inputs":[{"name":"sexp"},{"name":"sexp"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"sexp"},{"name":"sexp"}],"output":{"name":"bool"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"atom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"sexp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"atom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"sexp"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Error"],[4,"Atom"],[4,"Sexp"]]};
initSearch(searchIndex);
